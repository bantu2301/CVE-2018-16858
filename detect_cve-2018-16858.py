import subprocess as sub
import re,base64, gzip, sys, zlib, argparse, warnings

def command_line_args():
    """Helper called from main() to parse the command line arguments"""

    parser = argparse.ArgumentParser()
    parser.add_argument('--interface', metavar='<input interface>',
                        help='interface', required=True)
    args = parser.parse_args()
    return args

def decode_bs64(data_bs64):
    return base64.b64decode(data_bs64)

def bin_2_hex(data_bin):
    return data_bin.hex()

def gzip_data(data):
    f = gzip.open('data.gzip', 'wb')
    f.write(data)
    f.close()

def find_bs64(data):
    return ''.join(re.findall(r'[a-zA-Z0-9=\/+]{30,}', data))

def read_gzip_data():
    with open('data.gzip', mode='rb') as f:
        gzip_f = gzip.GzipFile(fileobj=f)
        content = gzip_f.read().decode()
        f.close()
    return content

def hex_to_ip(hex_string):
    temp = []
    i = 0
    while  i < len(hex_string):
        dec = int((hex_string[i:i+2]), 16)
        temp.append(str(dec))
        i += 2
    return '.'.join(temp)

def find_ip_port(data_hex):
    return re.findall(r'68([a-f0-9]{8})680200([a-f0-9]{4})', data_hex)

def find_attacker(payload):
    print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    payload_step1 = base64.b64decode(payload).decode('utf-16')
    bs64_step1 = find_bs64(payload_step1)
    print(bs64_step1)    
    # payload_step2 = base64.b64decode(bs64_step1+'==')

    # gzip_data(payload_step2) 
    # data_uzip = read_gzip_data()
    # bs64_data_uzip = find_bs64(data_uzip)

    bs64_data_uzip = zlib.decompress(base64.b64decode(bs64_step1),zlib.MAX_WBITS | 32)
    print(bs64_data_uzip)

    shellcode = decode_bs64(bs64_data_uzip)
    shellcode_hex = bin_2_hex(shellcode)
    ip_port = find_ip_port(shellcode_hex)
    ip_port_str = hex_to_ip(str(ip_port[0][0])) + "." + str(int(ip_port[0][1], 16))
    return ip_port_str

def detect(interface):
    signature = '../program/python-core-3.5.5/lib/pydoc.py$tempfilepager'
    flag = 0
    flag_sig = 0
    data = ""
    data_sig = ""
    ip_port = ""
    ip_port_sig = ""
    f = open("traffic.txt","w")
    try:
        p = sub.Popen(('tcpdump','-vAs0','tcp', '-i',interface), stdout=sub.PIPE)
        #p1 = sub.Popen(('tcpdump','-i','\Device\{E7C4EEAB-2FE1-435E-B008-FDFD321E2ABD}','-w','traffic.pcap'))
        for row in p.stdout:
            temp = row.strip().decode('utf-8')
            if 'flags' in temp:
                if flag == 0:
                    data = temp
                else:
                    f.write(str(data)+"\n\n")
                    data = temp
                flag = 1
            else:
                if signature in temp:
                    ip_port = data.split('|')[1].split('>')[0]
                    ip_src = (ip_port.split('.')[0]+"."+ip_port.split('.')[1]+"."+ip_port.split('.')[2]+"."+ip_port.split('.')[3]).strip()
                    port_src = ip_port.split('.')[4].strip()
                    print("\n\033[1;77m[\033[0m\033[1;35m+\033[0m\033[1;77m] \033[0m\033[1;35mDetecting CVE-2018-16858 in traffic \033[0m")
                    print("\033[1;77m[\033[0m\033[1;35m+\033[0m\033[1;77m] \033[0m\033[1;35mAttacker attack using CVE-2018-16858 system from Src: \033[0m\033[1;77m[%s] \033[0m\033[1;35mand Src Port: \033[0m\033[1;77m[%s] \033[0m\033[1;35mat \033[0m\033[1;77m%s\033[0m\n" % (ip_src,port_src,data.split('|')[0].split('.')[0]))
                    data_sig = temp
                    # if ' &amp;&amp; echo)?language=Python&amp;location=share"' not in data:
                    #     flag_sig = 1
                    # else:
                    #     x = data_sig.rindex('-noni -e ') + len('-noni -e ')
                    #     y = data_sig.rindex(' &amp;&amp; echo)?language=Python&amp;location=share"')
                    #     payload = data_sig[x:y]
                    #     ip_port = find_attacker(payload)
                
                data = data +" | "+ temp        
            # if flag_sig == 1:
            #     if 'flags' in temp.lower():
            #         pass
            #     else:
            #         temp = temp.replace(''.join(re.findall(r'E.*\.\.',temp)), '')
            #         data_sig += temp
            #         if ' &amp;&amp; echo)?language=Python&amp;location=share"' in data_sig:
            #             x = data_sig.rindex('-noni -e ') + len('-noni -e ')
            #             y = data_sig.rindex(' &amp;&amp; echo)?language=Python&amp;location=share"')
            #             payload = data_sig[x:y]
            #             ip_port_sig = find_attacker(payload)
            #             flag_sig = 0
            
            # if ip_port_sig != "":
            #     if ip_port_sig in row.rstrip().decode():
            #         ip_port_tf = re.findall(r'([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,5})', row.rstrip().decode())
                    
            #         ip_port_target = str('.'.join(ip_port_tf[0]))
            #         if ip_port_target == ip_port_sig:
            #             ip_port_target = str('.'.join(ip_port_tf[1]))

            #         print("Attacker attack system using CVE-2018-16858 from "+ ip_port + " to " + ip_port_target)
            #         print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    except KeyboardInterrupt:
        f.close()
        sys.exit(0)

if __name__ == "__main__":
    args = command_line_args()
    detect(args.interface)